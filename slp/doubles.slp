/** doubles(X).

True iff two consequtive coin flips result on the same side.

==
?- sload_pe(doubles).
?- seed_pe.

?- scall(doubles(Side)).
Side = tail.

?- scall(doubles(Side)).
false.

?- scall(doubles(Side)).
false.

?- scall(doubles(Side)).
Side = tail.

?- scall(doubles(Side)).
Side = head.
==

If you have packs: lib, mlu, b_real and Real,
==
?- lib(mlu).
?- seed_pe.
?- mlu_sample( scall(doubles(Side)), 100, Side, Freqs ).
Freqs = [fail-46, head-31, tail-23].

?- seed_pe.
?- mlu_sample( scall(doubles(X)), 100, X, Freqs ),
   mlu_frequency_plot( Freqs, [interface(barplot),outputs(png),stem('doubles_100'),las=2] ).
==
Creates file doubles_100.png which plots the frequencies.

To contrast, sampling with probability of derivations and goals.
==
?- seed_pe.
?- sample(doubles(head)).
false.

?- scall_sum( doubles(head), Prb ).
Prb = 0.25.

?- scall_sum( doubles(tail), Prb ).
Prb = 0.25.

?- scall_sum( doubles(Side), Prb ).
Prb = 0.5.
==

@author nicos angelopoulos
@version  0:1 2023/05/05

*/
1::doubles( X ) :-
     coin( X ),
     coin( X ).

% 
% The simplest SLP program implementing unbiased coin tosses.
%
0.5 :: coin( head ).
0.5 :: coin( tail ).

/*
	fam( [slp(coin),data([coin(head)-3,coin(tail)-2]),termin([ll_e(1.0E-16)]) ] ).
	also see the sampling in pack(mlu)
*/
