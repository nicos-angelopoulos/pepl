:- module( pepl, [
                   fam/1,
                   sload_pe/1,
                   sload_pe/2,
                   ssave/1,
                   switch_dbg/1,  % should we be using debug/1 ?
                   dbg_pepl/1,
                   pepl_citation/2,
                   pepl_version/2,
                   sls/0,
                   sample/1,
                   sample/5,
                   scall/1,
                   scall/2,
                   scall/5,
                   scall_findall/2,
                   scall_sum/2,
                   seed_pe/0,
                   % all_path/2,
                   op( 600, xfy, :: )
                 ] ).

:- ensure_loaded('../src/sload_pe').  % trick the system

:- dynamic(dbg_flag/1).

:- license(mit).

% :- switch_dbg( off ).
% :- switch_dbg( on ).

there_exists_mem_slp_with_datafile( DataFile ) :-
     ( bb_get( current_slp, Cslp ) -> 
          true
          ;
          pepl_warn( nothing_in_memory )
     ),
     ( file_name_extension(Stem,slp,Cslp) -> true; Stem=Cslp ),
     % fname_stem( Cslp, ".slp", Stem, _FullExt ),
     atom_concat( Stem, '_data', DataFile ).
     % atom_codes( Stem, StemCs ),
     % append( StemCs, "_data", DataFileCs ),
     % atom_codes( DataFile, DataFileCs ).
     
frequencies_to_top_goal( [H-_Hocc|T], Goal ) :-
     H =.. [Name|Args], 
     mold_vars_list( Args, Vars ),
     Goal =.. [Name|Vars],
     frequencies_to_top_goal_1( T, Goal ).

frequencies_to_top_goal_1( [], _Goal ).
frequencies_to_top_goal_1( [H-_Hocc|T], Goal ) :-
     ( \+ \+ Goal = H -> 
          true
          ;
          pepl_warn( skipping_datum(Goal,H) )
     ),
     frequencies_to_top_goal_1( T, Goal ).

check_data( Data ) :-
     ( is_list(Data) ->
          ( Data == [] ->
               Inner = empty_list
               ;
               ( check_data_1(Data) ->
                    Inner = []
                    ;
                    Inner = list_is_not_pairs(Data)
               )
          )
          ;
          Inner = not_a_list(Data)
     ),
     ( Inner == [] ->
          true
          ;
          pepl_warn( data_format_error(Inner) )
     ).

check_data_1( [] ).
check_data_1( [_G-_F|T] ) :-
     !,
     check_data_1( T ).

sload_in_fam_options( [], [] ).
sload_in_fam_options( [H|T], SldOpts ) :-
     ( \+ memberchk( H, [keep_pl(_)] ) ->
          SldOpts = TSldOpts
          ;
          SldOpts = [H|TSldOpts]
     ),
     sload_in_fam_options( T, TSldOpts ).

%% ssave( +File ).
%
% Save the stochastic program currently in memory to a file.
%
ssave( InFile ) :-
     ( InFile == user -> 
          bb_get( directives, Directvs ),
          portray_sdirectives( Directvs ), nl,
          bb_get( all_slp_clauses, AllClauses ),
          bb_get( pp, PPs ),
          portray_sclauses( AllClauses, PPs )
          ;
          ( file_name_extension(_Base,slp,InFile) ->
               File = InFile
               ;
               file_name_extension( InFile, slp, File )
          ),
          current_output( Co ),
          open( File, write, Stream ),
          ( ( set_output( Stream ),
               % DefMod = (write( (:- module( slp, [])) ), nl, nl),
               % pl( swi(_), DefMod ), 
               write( '% Generated by ssave/1.' ), nl, nl,
               bb_get( directives, Directvs ),
               portray_sdirectives( Directvs ), nl,
               bb_get( all_slp_clauses, AllClauses ),
               bb_get( pp, PPs ),
               portray_sclauses( AllClauses, PPs ),
               set_output( Co ),
               write( 'program saved in: ' ), write( File ), nl, !
               )
               ;
               set_output( Co ),
               write( 'failure while trying to save in: ' ), write( File ), nl
          ),
          close( Stream ),
          set_output( Co )
     ).

%% sls.
%
%  Listing of the stochastic program currently in memory.
%
sls :-
     % bb_get( all_transformed_clauses, TrsClauses ),
     % sprint_list( TrsClauses ).
     ssave( user ).

dbg_flag( off ).

:- ensure_loaded( library(write_list_with_line_numbers) ).

%% switch_dbg( Switch ). 
% 
%  Switch debugging of fam/1 to either =|on|= or =|off|=.
%
switch_dbg( Flag ) :-
     ( (Flag == on;Flag == off) -> 
          retractall( dbg_flag(_) ),
          assert( (dbg_flag(Flag):- !) )
          ;
          G = switch_dbg( Flag ), T=[off,on],
          print_message( error, type_error(G,1,T,Flag) )
     ).

%% dbg_pepl( +Goal ).
%
% Call Goal iff in (pepl) debugging. 
%
dbg_pepl( Goal ) :- 
     ( dbg_flag(on) -> 
          call( Goal )
          ; 
          true
     ).

dbg_ls_pepl( Header, List ) :-
     ( dbg_flag(on) -> 
          write( Header ), nl,
          write_list_with_line_numbers( List, 1, 4 ), nl
          ;
          true
     ).
